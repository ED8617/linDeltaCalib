/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 18.10.0.unofficial ] */
/* [wxMaxima: comment start ]
This notebook computes the best XY scaling matrix for incorrectly built or calibrated delta printers.
The printer may print circles as scaled elipses after a calibration based on a z-probe measurements.
There are few reasons why thsi may happen:
* incorrect step length,
* incorrect diagonal rod length and delta diameter  conpensating for it,
* slight rotations of the platform holding hotend (e.g. because of rotated tower or diagonal rods
  not having the same length).
These errors will lead to incorrect XY dimensions.  There is a chance that most of the erros will just
scale an original circle to some elispse. This scaling part of the error can be easily compensate using
a simple 2D stransformation matrix computed by this notebook.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Print a circle with diameter D. Select whatever diameter size you like. A good values should be around
1/3 and 2/3  of the printing bed diameter. Measure the dimameter of the circle at regular  angles. Start
with angle 0° (the direction of positive X axe) and cover the hole 360° at regular intervals with your
measurements. Divide the measured diameters by the expected value (to normalize them) and insert
the diameters from one circle into one sublist of diamters list below.
E.g. the sample data below are from 4 pritned circles. Each circle was measured at 7 angles: i*360°/7
for i = 0 to 6.  Diameters from one circle are in one sublist. The order of the items in one sublist is
important. It must correspond to the increasing angles.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
diameters :
[[0.9922,0.9944,0.9968,0.9959,0.9914,0.9967,0.9972]
,[0.9911,0.9944,0.9966,0.994,0.9912,0.9967,0.9969]
,[0.9932,0.995,0.9986,0.9954,0.9936,0.9971,0.9978]
,[0.9934,0.9951,0.9983,0.9953,0.9935,0.9976,0.9978]] $
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
toPoint(d, i,n) := [d/2*cos(2*%pi/n*(i-1)), d/2*sin(2*%pi/n*(i-1))];
toPoints(ds) := makelist(toPoint(ds[i], i, length(ds)), i, 1, length(ds));
allPoints: apply(append, map(toPoints, diameters)) $
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
errFn(x,y) := sqrt((x*xx + y*yx)^2+(x*xy+y*yy)^2) - 0.5;
errFns: map(lambda([p],apply(errFn,p)), allPoints) $
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
load(minpack) $

/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
RV_raw: minpack_lsquares(errFns, [xx,yx,xy,yy], [1,0,0,1]);
avgErr: sqrt(RV_raw[2]/length(errFns));
RV: makelist([[xx,yx,xy,yy][i] = RV_raw[1][i]], i, 1, 4);
/* [wxMaxima: input   end   ] */



/* Old versions of Maxima abort on loading files that end in a comment. */
"Created with wxMaxima 18.10.0.unofficial"$
